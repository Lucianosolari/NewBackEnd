// <auto-generated />
using System;
using BackendBolsaDeTrabajoUTN.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendBolsaDeTrabajoUTN.Migrations
{
    [DbContext(typeof(TPContext))]
    partial class TPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.CVFile", b =>
                {
                    b.Property<int>("CVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CVIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CVId");

                    b.HasIndex("StudentId");

                    b.ToTable("CVFiles");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Career", b =>
                {
                    b.Property<int>("CareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CareerAbbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CareerIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CareerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CareerTotalSubjects")
                        .HasColumnType("int");

                    b.Property<string>("CareerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CareerId");

                    b.ToTable("Careers");

                    b.HasData(
                        new
                        {
                            CareerId = 1,
                            CareerAbbreviation = "TUP",
                            CareerIsActive = true,
                            CareerName = "Tecnicatura Universitaria en Programación",
                            CareerTotalSubjects = 20,
                            CareerType = "Programación"
                        },
                        new
                        {
                            CareerId = 2,
                            CareerAbbreviation = "TUHS",
                            CareerIsActive = true,
                            CareerName = "Tecnicatura Universitaria en Higiene y Seguridad",
                            CareerTotalSubjects = 15,
                            CareerType = "Seguridad"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Knowledge", b =>
                {
                    b.Property<int>("KnowledgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("KnowledgeIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KnowledgeId");

                    b.ToTable("Knowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeId = 1,
                            KnowledgeIsActive = true,
                            Level = "Advanced",
                            Type = "Programming"
                        },
                        new
                        {
                            KnowledgeId = 2,
                            KnowledgeIsActive = true,
                            Level = "Intermediate",
                            Type = "Design"
                        },
                        new
                        {
                            KnowledgeId = 3,
                            KnowledgeIsActive = true,
                            Level = "Beginner",
                            Type = "Marketing"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfferDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("OfferIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OfferSpecialty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OfferTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OfferId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            CompanyId = 2,
                            CreatedDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferDescription = "Conocimientos avanzados en SQL",
                            OfferIsActive = true,
                            OfferSpecialty = "SQL",
                            OfferTitle = "Analista de datos"
                        },
                        new
                        {
                            OfferId = 2,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferDescription = "Conocimientos avanzados en entorno .NET",
                            OfferIsActive = true,
                            OfferSpecialty = ".NET",
                            OfferTitle = "Desarrollador Backend"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentCareer", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CareerId")
                        .HasColumnType("int");

                    b.Property<bool>("StudentCareerIsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("StudentId", "CareerId");

                    b.HasIndex("CareerId");

                    b.ToTable("StudentCareer", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 4,
                            CareerId = 1,
                            StudentCareerIsActive = true
                        },
                        new
                        {
                            StudentId = 5,
                            CareerId = 2,
                            StudentCareerIsActive = true
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentKnowledge", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("int");

                    b.Property<bool>("StudentKnowledgeIsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("StudentKnowledge", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            KnowledgeId = 1,
                            StudentKnowledgeIsActive = true
                        },
                        new
                        {
                            UserId = 3,
                            KnowledgeId = 2,
                            StudentKnowledgeIsActive = true
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("StudentOfferIsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("OfferId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOffer", (string)null);

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            StudentId = 4,
                            StudentOfferIsActive = true
                        },
                        new
                        {
                            OfferId = 2,
                            StudentId = 5,
                            StudentOfferIsActive = true
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("UserIsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Admin", b =>
                {
                    b.HasBaseType("BackendBolsaDeTrabajoUTN.Entities.User");

                    b.Property<string>("NameAdmin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            UserId = 6,
                            Password = "d404559f602eab6fd602ac7680dacbfaadd13630335e951f097af3900e9de176b6db28512f2e000b9d04fba5133e8b1c6e8df59db3a8ab9d60be4b97cc9e81db",
                            UserEmail = "luciano3924@gmail.com",
                            UserIsActive = true,
                            UserName = "admin",
                            NameAdmin = "AdminPepe"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Company", b =>
                {
                    b.HasBaseType("BackendBolsaDeTrabajoUTN.Entities.User");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CompanyCUIT")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyLine")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CompanyPendingConfirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CompanyPersonalJob")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyPersonalName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CompanyPersonalPhone")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyPersonalSurname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CompanyPhone")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyPostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyRelationContact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyWebPage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Company");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "d404559f602eab6fd602ac7680dacbfaadd13630335e951f097af3900e9de176b6db28512f2e000b9d04fba5133e8b1c6e8df59db3a8ab9d60be4b97cc9e81db",
                            UserEmail = "mail1@gmai.com",
                            UserIsActive = true,
                            UserName = "Company 1",
                            CompanyAddress = "D 15",
                            CompanyCUIT = 20447575751L,
                            CompanyLine = "Textil",
                            CompanyLocation = "Rosario",
                            CompanyName = "Microsoft",
                            CompanyPendingConfirmation = true,
                            CompanyPersonalJob = "Gerente",
                            CompanyPersonalName = "Juan Carlos",
                            CompanyPersonalPhone = 22L,
                            CompanyPersonalSurname = "Peralta",
                            CompanyPhone = 341367898L,
                            CompanyPostalCode = "2000",
                            CompanyRelationContact = "Vacio",
                            CompanyWebPage = "web"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "7e2feac95dcd7d1df803345e197369af4b156e4e7a95fcb2955bdbbb3a11afd8bb9d35931bf15511370b18143e38b01b903f55c5ecbded4af99934602fcdf38c",
                            UserEmail = "mail2@gmai.com",
                            UserIsActive = true,
                            UserName = "Company 2",
                            CompanyAddress = "E 18",
                            CompanyCUIT = 20445556661L,
                            CompanyLine = "Textil",
                            CompanyLocation = "Rosario",
                            CompanyName = "Apple",
                            CompanyPendingConfirmation = true,
                            CompanyPersonalJob = "Gerente",
                            CompanyPersonalName = "Juan Esteban",
                            CompanyPersonalPhone = 25L,
                            CompanyPersonalSurname = "Peralta",
                            CompanyPhone = 341334455L,
                            CompanyPostalCode = "2000",
                            CompanyRelationContact = "Vacio",
                            CompanyWebPage = "web2"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Student", b =>
                {
                    b.HasBaseType("BackendBolsaDeTrabajoUTN.Entities.User");

                    b.Property<string>("AltEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ApprovedSubjectsQuantity")
                        .HasColumnType("int");

                    b.Property<int>("AverageMarksWithPostponement")
                        .HasColumnType("int");

                    b.Property<int>("AverageMarksWithoutPostponement")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CUIL_CUIT")
                        .HasColumnType("bigint");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CollegeDegree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentStudyYear")
                        .HasColumnType("int");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyDepartment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FamilyFloor")
                        .HasColumnType("int");

                    b.Property<string>("FamilyLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FamilyOtherPhone")
                        .HasColumnType("int");

                    b.Property<int>("FamilyPersonalPhone")
                        .HasColumnType("int");

                    b.Property<string>("FamilyProvince")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyStreet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyStreetLetter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FamilyStreetNumber")
                        .HasColumnType("int");

                    b.Property<int>("File")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalDepartment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonalFloor")
                        .HasColumnType("int");

                    b.Property<string>("PersonalLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonalOtherPhone")
                        .HasColumnType("int");

                    b.Property<int>("PersonalPersonalPhone")
                        .HasColumnType("int");

                    b.Property<string>("PersonalProvince")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalStreet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalStreetLetter")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonalStreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryDegree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecialtyPlan")
                        .HasColumnType("int");

                    b.Property<string>("StudyTurn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            Password = "2757cb3cafc39af451abb2697be79b4ab61d63d74d85b0418629de8c26811b529f3f3780d0150063ff55a2beee74c4ec102a2a2731a1f1f7f10d473ad18a6a87",
                            UserEmail = "manuel@gmail.com",
                            UserIsActive = true,
                            UserName = "string",
                            AltEmail = "manuelAlt@gmail.com",
                            ApprovedSubjectsQuantity = 10,
                            AverageMarksWithPostponement = 6,
                            AverageMarksWithoutPostponement = 7,
                            Birth = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CUIL_CUIT = 20445556661L,
                            CivilStatus = "Casado",
                            CollegeDegree = "Sistemas",
                            CurrentStudyYear = 2,
                            DocumentNumber = 44555666,
                            DocumentType = "DNI",
                            FamilyCountry = "Argentina",
                            FamilyDepartment = "4B",
                            FamilyFloor = 2,
                            FamilyLocation = "Ciudad Autónoma de Buenos Aires",
                            FamilyOtherPhone = 987654321,
                            FamilyPersonalPhone = 123456789,
                            FamilyProvince = "Buenos Aires",
                            FamilyStreet = "Calle Principal",
                            FamilyStreetLetter = "A",
                            FamilyStreetNumber = 123,
                            File = 12345,
                            Name = "Manuel",
                            Observations = "Fanatico de linux",
                            PersonalCountry = "Argentina",
                            PersonalDepartment = "Depto. 2",
                            PersonalFloor = 1,
                            PersonalLocation = "Córdoba Capital",
                            PersonalOtherPhone = 123456789,
                            PersonalPersonalPhone = 987654321,
                            PersonalProvince = "Córdoba",
                            PersonalStreet = "Avenida Principal",
                            PersonalStreetLetter = "B",
                            PersonalStreetNumber = 456,
                            SecondaryDegree = "Completo",
                            Sex = "Masculino",
                            Specialty = "Sistemas",
                            SpecialtyPlan = 2002,
                            StudyTurn = "Tarde",
                            Surname = "Ibarbia"
                        },
                        new
                        {
                            UserId = 4,
                            Password = "ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413",
                            UserEmail = "luciano@gmail.com",
                            UserIsActive = true,
                            UserName = "lucianoS",
                            AltEmail = "lucianoAlt@gmail.com",
                            ApprovedSubjectsQuantity = 10,
                            AverageMarksWithPostponement = 6,
                            AverageMarksWithoutPostponement = 7,
                            Birth = new DateTime(1800, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CUIL_CUIT = 203334445551L,
                            CivilStatus = "Soltero",
                            CollegeDegree = "Sistemas",
                            CurrentStudyYear = 2,
                            DocumentNumber = 33444555,
                            DocumentType = "DNI",
                            FamilyCountry = "Argentina",
                            FamilyDepartment = "5B",
                            FamilyFloor = 22,
                            FamilyLocation = "Rosario",
                            FamilyOtherPhone = 987654321,
                            FamilyPersonalPhone = 123456789,
                            FamilyProvince = "Santa Fe",
                            FamilyStreet = "Calle asdasd",
                            FamilyStreetLetter = "AA",
                            FamilyStreetNumber = 12,
                            File = 12346,
                            Name = "Luciano",
                            Observations = "Fanatico de linux",
                            PersonalCountry = "Argentina",
                            PersonalDepartment = "Depto. 2",
                            PersonalFloor = 1,
                            PersonalLocation = "Córdoba Capital",
                            PersonalOtherPhone = 123456789,
                            PersonalPersonalPhone = 987654321,
                            PersonalProvince = "Córdoba",
                            PersonalStreet = "Avenida Principal",
                            PersonalStreetLetter = "B",
                            PersonalStreetNumber = 456,
                            SecondaryDegree = "Completo",
                            Sex = "Masculino",
                            Specialty = "Sistemas",
                            SpecialtyPlan = 2002,
                            StudyTurn = "Tarde",
                            Surname = "Solari"
                        },
                        new
                        {
                            UserId = 5,
                            Password = "ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413",
                            UserEmail = "santiago@gmail.com",
                            UserIsActive = true,
                            UserName = "santiagoC",
                            AltEmail = "santiagoAlt@gmail.com",
                            ApprovedSubjectsQuantity = 10,
                            AverageMarksWithPostponement = 6,
                            AverageMarksWithoutPostponement = 7,
                            Birth = new DateTime(2005, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CUIL_CUIT = 20556667771L,
                            CivilStatus = "Soltero",
                            CollegeDegree = "Sistemas",
                            CurrentStudyYear = 2,
                            DocumentNumber = 55666777,
                            DocumentType = "DNI",
                            FamilyCountry = "Argentina",
                            FamilyDepartment = "5B",
                            FamilyFloor = 22,
                            FamilyLocation = "Rosario",
                            FamilyOtherPhone = 987654321,
                            FamilyPersonalPhone = 123456789,
                            FamilyProvince = "Santa Fe",
                            FamilyStreet = "Calle asdasd",
                            FamilyStreetLetter = "AA",
                            FamilyStreetNumber = 12,
                            File = 12347,
                            Name = "Santiago",
                            Observations = "Fanatico de linux",
                            PersonalCountry = "Argentina",
                            PersonalDepartment = "Depto. 2",
                            PersonalFloor = 1,
                            PersonalLocation = "Córdoba Capital",
                            PersonalOtherPhone = 123456789,
                            PersonalPersonalPhone = 987654321,
                            PersonalProvince = "Córdoba",
                            PersonalStreet = "Avenida Principal",
                            PersonalStreetLetter = "B",
                            PersonalStreetNumber = 456,
                            SecondaryDegree = "Completo",
                            Sex = "Masculino",
                            Specialty = "Sistemas",
                            SpecialtyPlan = 2002,
                            StudyTurn = "Tarde",
                            Surname = "Caso"
                        });
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.CVFile", b =>
                {
                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Offer", b =>
                {
                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Company", "Company")
                        .WithMany("AnnouncedOffers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentCareer", b =>
                {
                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Career", "Career")
                        .WithMany()
                        .HasForeignKey("CareerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Career");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentKnowledge", b =>
                {
                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Knowledge", "Knowledge")
                        .WithMany("StudentKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Student", "Student")
                        .WithMany("StudentKnowledges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.StudentOffer", b =>
                {
                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Offer", "Offer")
                        .WithMany("StudentOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendBolsaDeTrabajoUTN.Entities.Student", "Student")
                        .WithMany("StudentOffers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Knowledge", b =>
                {
                    b.Navigation("StudentKnowledges");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Offer", b =>
                {
                    b.Navigation("StudentOffers");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Company", b =>
                {
                    b.Navigation("AnnouncedOffers");
                });

            modelBuilder.Entity("BackendBolsaDeTrabajoUTN.Entities.Student", b =>
                {
                    b.Navigation("StudentKnowledges");

                    b.Navigation("StudentOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
